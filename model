import pandas as pd

class MetaEventImpactModel:
    def __init__(self):
        """
        初始化模型，定义默认权重和空数据集。
        """
        self.alpha = 0.5  # 经济效益权重
        self.beta = 0.3   # 社会效益权重
        self.gamma = 0.2  # 品牌影响力权重
        self.data = None  # 存储输入数据

    def load_data(self, data):
        """
        加载已有数据到模型。
        :param data: 字典形式的数据，包含各目的地的游客数量、平均消费等。
        """
        self.data = pd.DataFrame(data)

    def create_new_dataset(self):
        """
        创建一个新的数据集，允许用户输入每个目的地的数据。
        :return: 包含新数据集的字典。
        """
        new_data = {
            "Destination": [],
            "Visitors": [],
            "Overnight_Stays": [],
            "Hotels": [],
            "Restaurants": [],
            "Museums": [],
            "Discos_Night_Clubs": [],
        }

        print("请为每个目的地输入以下数据：")
        num_destinations = int(input("请输入目的地的数量："))

        for i in range(num_destinations):
            print(f"\n目的地 {i + 1}:")
            new_data["Destination"].append(input("目的地名称："))
            new_data["Visitors"].append(int(input("游客数量：")))
            new_data["Overnight_Stays"].append(int(input("过夜游客数量：")))
            new_data["Hotels"].append(int(input("酒店数量：")))
            new_data["Restaurants"].append(int(input("餐厅数量：")))
            new_data["Museums"].append(int(input("博物馆数量：")))
            new_data["Discos_Night_Clubs"].append(int(input("夜店数量：")))

        return new_data

    def input_parameters(self):
        """
        用户输入每个游客的平均消费和元事件的总成本。
        :return: 平均消费和总成本。
        """
        print("\n请输入以下数据：")
        spending_per_visitor = float(input("每个游客的平均消费（美元）："))
        total_cost = float(input("元事件的总成本（美元）："))
        return spending_per_visitor, total_cost

    def calculate_economic_benefit(self, spending_per_visitor):
        """
        计算各目的地的经济效益。
        :param spending_per_visitor: 每个游客的平均消费（美元）。
        :return: 包含经济效益的 DataFrame。
        """
        if self.data is None:
            raise ValueError("数据未加载，请先调用 load_data 方法加载数据。")
        self.data["Economic_Benefit"] = self.data["Visitors"] * spending_per_visitor
        return self.data

    def calculate_social_benefit(self):
        """
        计算各目的地的社会效益。
        :return: 包含社会效益的 DataFrame。
        """
        if self.data is None:
            raise ValueError("数据未加载，请先调用 load_data 方法加载数据。")
        # 假设互动指数和社区参与度
        self.data["Interaction_Index"] = [0.8, 0.7, 0.75, 0.85]  # 互动指数
        self.data["Community_Engagement"] = [0.6, 0.5, 0.65, 0.7]  # 社区参与度
        self.data["Social_Benefit"] = self.data["Interaction_Index"] * self.data["Community_Engagement"]
        return self.data

    def calculate_brand_impact(self):
        """
        计算各目的地的品牌影响力。
        :return: 包含品牌影响力的 DataFrame。
        """
        if self.data is None:
            raise ValueError("数据未加载，请先调用 load_data 方法加载数据。")
        # 假设品牌知名度和品牌一致性
        self.data["Brand_Awareness"] = [0.9, 0.8, 0.85, 0.95]  # 品牌知名度
        self.data["Brand_Consistency"] = [0.8, 0.75, 0.8, 0.85]  # 品牌一致性
        self.data["Brand_Impact"] = self.data["Brand_Awareness"] * self.data["Brand_Consistency"]
        return self.data

    def calculate_total_benefit(self):
        """
        计算各目的地的综合效益。
        :return: 包含综合效益的 DataFrame。
        """
        if self.data is None:
            raise ValueError("数据未加载，请先调用 load_data 方法加载数据。")
        self.data["Total_Benefit"] = (
            self.alpha * self.data["Economic_Benefit"]
            + self.beta * self.data["Social_Benefit"]
            + self.gamma * self.data["Brand_Impact"]
        )
        return self.data

    def calculate_cost_benefit_ratio(self, total_cost):
        """
        计算各目的地的成本效益比。
        :param total_cost: 元事件的总成本。
        :return: 包含成本效益比的 DataFrame。
        """
        if self.data is None:
            raise ValueError("数据未加载，请先调用 load_data 方法加载数据。")
        self.data["Cost_Benefit_Ratio"] = self.data["Total_Benefit"] / total_cost
        return self.data

    def summarize_results(self):
        """
        汇总所有目的地的总效益。
        :return: 汇总结果（总经济效益、总社会效益、总品牌影响力、总综合效益）。
        """
        if self.data is None:
            raise ValueError("数据未加载，请先调用 load_data 方法加载数据。")
        total_economic_benefit = self.data["Economic_Benefit"].sum()
        total_social_benefit = self.data["Social_Benefit"].sum()
        total_brand_impact = self.data["Brand_Impact"].sum()
        total_benefit = self.data["Total_Benefit"].sum()
        return {
            "Total_Economic_Benefit": total_economic_benefit,
            "Total_Social_Benefit": total_social_benefit,
            "Total_Brand_Impact": total_brand_impact,
            "Total_Benefit": total_benefit,
        }

    def print_results(self):
        """
        打印各目的地的效益计算结果和汇总结果。
        """
        if self.data is None:
            raise ValueError("数据未加载，请先调用 load_data 方法加载数据。")
        print("\n各目的地的效益计算结果：")
        print(self.data)

        summary = self.summarize_results()
        print("\n汇总结果：")
        print(f"总经济效益: ${summary['Total_Economic_Benefit']}")
        print(f"总社会效益: {summary['Total_Social_Benefit']}")
        print(f"总品牌影响力: {summary['Total_Brand_Impact']}")
        print(f"总综合效益: {summary['Total_Benefit']}")


# 示例使用
if __name__ == "__main__":
    # 初始化模型
    model = MetaEventImpactModel()

    # 步骤 1：加载数据
    print("请选择数据来源：")
    print("1. 使用论文中的表1数据")
    print("2. 创建新的数据集")
    choice = input("请输入选项（1 或 2）：")

    if choice == "1":
        # 论文中表1的数据
        data = {
            "Destination": ["Rimini", "Ferrara", "Forlì-Cesena", "Ravenna"],
            "Visitors": [3147464, 463341, 976803, 1281517],  # 游客数量
            "Overnight_Stays": [15504706, 2401526, 5200540, 6231885],  # 过夜游客数量
            "Hotels": [2253, 102, 504, 560],  # 酒店数量
            "Restaurants": [1753, 1225, 1403, 1556],  # 餐厅数量
            "Museums": [12, 11, 6, 31],  # 博物馆数量
            "Discos_Night_Clubs": [72, 24, 28, 40],  # 夜店数量
        }
        model.load_data(data)
    elif choice == "2":
        # 创建新的数据集
        new_data = model.create_new_dataset()
        model.load_data(new_data)
    else:
        print("无效选项，程序退出。")
        exit()

    # 步骤 2：输入参数
    spending_per_visitor, total_cost = model.input_parameters()

    # 步骤 3：计算效益
    model.calculate_economic_benefit(spending_per_visitor)
    model.calculate_social_benefit()
    model.calculate_brand_impact()
    model.calculate_total_benefit()
    model.calculate_cost_benefit_ratio(total_cost)

    # 步骤 4：输出结果
    model.print_results()
