import pandas as pd
import os
from datetime import datetime

class MetaEventImpactModel:
    def __init__(self):
        """
        初始化模型，定义默认权重和空数据集。
        """
        self.alpha = 0.5  # 经济效益权重
        self.beta = 0.3   # 社会效益权重
        self.gamma = 0.2  # 品牌影响力权重
        self.data = None  # 存储元事件数据

    def load_meta_event_data(self):
        """
        从项目库中读取 meta_event_data.csv 文件。
        :return: 包含元事件数据的 DataFrame。
        """
        # 假设 meta_event_data.csv 位于当前工作目录
        data_path = "meta_event_data.csv"
        if not os.path.exists(data_path):
            raise FileNotFoundError(f"未找到文件：{data_path}")
        
        # 读取 CSV 文件
        self.data = pd.read_csv(data_path)
        return self.data

    def input_user_data(self):
        """
        用户输入数据。
        :return: 包含用户输入数据的字典。
        """
        print("请输入以下数据：")
        user_data = {
            "Spending_Per_Visitor": float(input("每个游客的平均消费（美元）：")),
            "Total_Cost": float(input("元事件的总成本（美元）：")),
        }
        return user_data

    def save_user_data(self, user_data):
        """
        将用户输入的数据保存为 Excel 文件。
        :param user_data: 包含用户输入数据的字典。
        """
        # 创建 history_data 文件夹
        history_folder = "history_data"
        os.makedirs(history_folder, exist_ok=True)

        # 生成文件名（基于当前时间）
        current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
        file_name = f"user_input_data_{current_time}.xlsx"
        file_path = os.path.join(history_folder, file_name)

        # 将数据保存为 Excel 文件
        df = pd.DataFrame([user_data])
        df.to_excel(file_path, index=False)
        print(f"\n用户输入数据已保存到 '{file_path}'")

    def calculate_economic_benefit(self, spending_per_visitor):
        """
        计算各目的地的经济效益。
        :param spending_per_visitor: 每个游客的平均消费（美元）。
        :return: 包含经济效益的 DataFrame。
        """
        if self.data is None:
            raise ValueError("数据未加载，请先调用 load_meta_event_data 方法加载数据。")
        self.data["Economic_Benefit"] = self.data["Visitors"] * spending_per_visitor
        return self.data

    def calculate_social_benefit(self):
        """
        计算各目的地的社会效益。
        :return: 包含社会效益的 DataFrame。
        """
        if self.data is None:
            raise ValueError("数据未加载，请先调用 load_meta_event_data 方法加载数据。")
        # 假设互动指数和社区参与度
        self.data["Interaction_Index"] = [0.8, 0.7, 0.75, 0.85]  # 互动指数
        self.data["Community_Engagement"] = [0.6, 0.5, 0.65, 0.7]  # 社区参与度
        self.data["Social_Benefit"] = self.data["Interaction_Index"] * self.data["Community_Engagement"]
        return self.data

    def calculate_brand_impact(self):
        """
        计算各目的地的品牌影响力。
        :return: 包含品牌影响力的 DataFrame。
        """
        if self.data is None:
            raise ValueError("数据未加载，请先调用 load_meta_event_data 方法加载数据。")
        # 假设品牌知名度和品牌一致性
        self.data["Brand_Awareness"] = [0.9, 0.8, 0.85, 0.95]  # 品牌知名度
        self.data["Brand_Consistency"] = [0.8, 0.75, 0.8, 0.85]  # 品牌一致性
        self.data["Brand_Impact"] = self.data["Brand_Awareness"] * self.data["Brand_Consistency"]
        return self.data

    def calculate_total_benefit(self):
        """
        计算各目的地的综合效益。
        :return: 包含综合效益的 DataFrame。
        """
        if self.data is None:
            raise ValueError("数据未加载，请先调用 load_meta_event_data 方法加载数据。")
        self.data["Total_Benefit"] = (
            self.alpha * self.data["Economic_Benefit"]
            + self.beta * self.data["Social_Benefit"]
            + self.gamma * self.data["Brand_Impact"]
        )
        return self.data

    def calculate_cost_benefit_ratio(self, total_cost):
        """
        计算各目的地的成本效益比。
        :param total_cost: 元事件的总成本。
        :return: 包含成本效益比的 DataFrame。
        """
        if self.data is None:
            raise ValueError("数据未加载，请先调用 load_meta_event_data 方法加载数据。")
        self.data["Cost_Benefit_Ratio"] = self.data["Total_Benefit"] / total_cost
        return self.data

    def summarize_results(self):
        """
        汇总所有目的地的总效益。
        :return: 汇总结果（总经济效益、总社会效益、总品牌影响力、总综合效益）。
        """
        if self.data is None:
            raise ValueError("数据未加载，请先调用 load_meta_event_data 方法加载数据。")
        total_economic_benefit = self.data["Economic_Benefit"].sum()
        total_social_benefit = self.data["Social_Benefit"].sum()
        total_brand_impact = self.data["Brand_Impact"].sum()
        total_benefit = self.data["Total_Benefit"].sum()
        return {
            "Total_Economic_Benefit": total_economic_benefit,
            "Total_Social_Benefit": total_social_benefit,
            "Total_Brand_Impact": total_brand_impact,
            "Total_Benefit": total_benefit,
        }

    def print_results(self):
        """
        打印各目的地的效益计算结果和汇总结果。
        """
        if self.data is None:
            raise ValueError("数据未加载，请先调用 load_meta_event_data 方法加载数据。")
        print("\n各目的地的效益计算结果：")
        print(self.data)

        summary = self.summarize_results()
        print("\n汇总结果：")
        print(f"总经济效益: ${summary['Total_Economic_Benefit']}")
        print(f"总社会效益: {summary['Total_Social_Benefit']}")
        print(f"总品牌影响力: {summary['Total_Brand_Impact']}")
        print(f"总综合效益: {summary['Total_Benefit']}")


# 示例使用
if __name__ == "__main__":
    try:
        # 初始化模型
        model = MetaEventImpactModel()

        # 步骤 1：读取 meta_event_data.csv
        print("正在读取元事件数据...")
        meta_event_df = model.load_meta_event_data()
        print("\n元事件数据：")
        print(meta_event_df)

        # 步骤 2：用户输入数据
        user_data = model.input_user_data()

        # 步骤 3：保存用户输入数据
        model.save_user_data(user_data)

        # 步骤 4：计算效益
        spending_per_visitor = user_data["Spending_Per_Visitor"]
        total_cost = user_data["Total_Cost"]

        model.calculate_economic_benefit(spending_per_visitor)
        model.calculate_social_benefit()
        model.calculate_brand_impact()
        model.calculate_total_benefit()
        model.calculate_cost_benefit_ratio(total_cost)

        # 步骤 5：输出结果
        model.print_results()

    except Exception as e:
        print(f"发生错误：{e}")
